// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"image"
	"sync"

	"github.com/petewall/eink-radiator-image-source-text/internal"
)

type FakeBackgroundMaker struct {
	Stub        func(int, int, string) image.Image
	mutex       sync.RWMutex
	argsForCall []struct {
		arg1 int
		arg2 int
		arg3 string
	}
	returns struct {
		result1 image.Image
	}
	returnsOnCall map[int]struct {
		result1 image.Image
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackgroundMaker) Spy(arg1 int, arg2 int, arg3 string) image.Image {
	fake.mutex.Lock()
	ret, specificReturn := fake.returnsOnCall[len(fake.argsForCall)]
	fake.argsForCall = append(fake.argsForCall, struct {
		arg1 int
		arg2 int
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.Stub
	returns := fake.returns
	fake.recordInvocation("BackgroundMaker", []interface{}{arg1, arg2, arg3})
	fake.mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return returns.result1
}

func (fake *FakeBackgroundMaker) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeBackgroundMaker) Calls(stub func(int, int, string) image.Image) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = stub
}

func (fake *FakeBackgroundMaker) ArgsForCall(i int) (int, int, string) {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].arg1, fake.argsForCall[i].arg2, fake.argsForCall[i].arg3
}

func (fake *FakeBackgroundMaker) Returns(result1 image.Image) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	fake.returns = struct {
		result1 image.Image
	}{result1}
}

func (fake *FakeBackgroundMaker) ReturnsOnCall(i int, result1 image.Image) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	if fake.returnsOnCall == nil {
		fake.returnsOnCall = make(map[int]struct {
			result1 image.Image
		})
	}
	fake.returnsOnCall[i] = struct {
		result1 image.Image
	}{result1}
}

func (fake *FakeBackgroundMaker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBackgroundMaker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.BackgroundMaker = new(FakeBackgroundMaker).Spy
